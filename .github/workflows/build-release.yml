name: Build and Release Cake

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux-x64
            runner: ubuntu-latest
            cc: clang
            executable_suffix: ""
          - os: macos-x64
            runner: macos-13
            cc: clang
            executable_suffix: ""
          - os: macos-arm64
            runner: macos-latest
            cc: clang
            executable_suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: matrix.os == 'linux-x64'
      run: |
        sudo apt-get update
        sudo apt-get install -y uuid-dev

    - name: Build Cake
      run: |
        cd src
        ${{ matrix.cc }} build.c -o build${{ matrix.executable_suffix }}
        ./build${{ matrix.executable_suffix }}
      shell: bash

    - name: Prepare artifact directory
      run: |
        mkdir -p artifact/bin
        mkdir -p artifact/include
        mkdir -p artifact/docs

    - name: Copy binaries
      run: |
        cp src/cake${{ matrix.executable_suffix }} artifact/bin/
        chmod +x artifact/bin/cake${{ matrix.executable_suffix }}
      shell: bash

    - name: Copy additional files
      run: |
        # Copy header files but exclude .include files (build artifacts)
        find src/include -name "*.h" -not -name "*.h.include" -exec cp {} artifact/include/ \; 2>/dev/null || true
        cp README.md artifact/ 2>/dev/null || true
        cp LICENSE artifact/ 2>/dev/null || true
        cp *.md artifact/docs/ 2>/dev/null || true
      shell: bash

    - name: Copy manifest files
      run: |
        cp package.json artifact/
      shell: bash

    - name: Create version info
      run: |
        echo "Cake Compiler v$(grep CAKE_VERSION src/version.h | cut -d'"' -f2)" > artifact/VERSION
        echo "Built on: $(date)" >> artifact/VERSION
        echo "Platform: ${{ matrix.os }}" >> artifact/VERSION
        echo "Commit: ${{ github.sha }}" >> artifact/VERSION
      shell: bash

    - name: Create archive
      run: |
        cd artifact
        tar -czf ../cake-${{ matrix.os }}.tar.gz *
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cake-${{ matrix.os }}
        path: cake-${{ matrix.os }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(grep CAKE_VERSION src/version.h | cut -d'"' -f2)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Prepare release files
      run: |
        mkdir -p release_temp
        mkdir -p release_temp/bin
        
        # Extract all platform archives and organize binaries by platform
        for archive in artifacts/*/cake-*.tar.gz; do
          platform=$(basename "$archive" .tar.gz)
          temp_dir="temp_$platform"
          mkdir -p "$temp_dir"
          tar -xzf "$archive" -C "$temp_dir"
          
          # Create platform-specific bin directory and copy binary
          mkdir -p "release_temp/bin/$platform"
          cp "$temp_dir/bin/"* "release_temp/bin/$platform/"
          
          # Clean up temp directory
          rm -rf "$temp_dir"
        done
        
        # Create shared directories from first platform's archive
        first_archive=$(ls artifacts/*/cake-*.tar.gz | head -n1)
        temp_dir="temp_shared"
        mkdir -p "$temp_dir"
        tar -xzf "$first_archive" -C "$temp_dir"
        
        # Copy shared resources
        if [ -d "$temp_dir/include" ]; then
          cp -r "$temp_dir/include" release_temp/
        fi
        if [ -d "$temp_dir/docs" ]; then
          cp -r "$temp_dir/docs" release_temp/
        fi
        cp "$temp_dir/package.json" release_temp/ 2>/dev/null || true
        cp "$temp_dir/VERSION" release_temp/ 2>/dev/null || true
        cp "$temp_dir/README.md" release_temp/ 2>/dev/null || true
        cp "$temp_dir/LICENSE" release_temp/ 2>/dev/null || true
        
        rm -rf "$temp_dir"
        
        # Create single combined archive
        mkdir -p release
        cd release_temp
        tar -czf "../release/cake-compiler-v${{ steps.version.outputs.version }}.tar.gz" *
        cd ..
        ls -la release/
        echo "Release structure:"
        cd release_temp && find . -type f | head -20

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.version.outputs.version) }}
        name: Cake Compiler v${{ steps.version.outputs.version }}
        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
