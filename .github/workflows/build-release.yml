name: Build and Release Cake

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux-x64
            runner: ubuntu-latest
            cc: clang
            artifact_name: cake-linux-x64
            executable_suffix: ""
          - os: macos-x64
            runner: macos-13
            cc: clang
            artifact_name: cake-macos-x64
            executable_suffix: ""
          - os: macos-arm64
            runner: macos-latest
            cc: clang
            artifact_name: cake-macos-arm64
            executable_suffix: ""
          - os: windows-x64
            runner: windows-latest
            cc: clang
            artifact_name: cake-windows-x64
            executable_suffix: ".exe"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Clang (Windows)
      if: matrix.os == 'windows-x64'
      run: |
        choco install llvm
        echo "C:\Program Files\LLVM\bin" >> $GITHUB_PATH
      shell: powershell

    - name: Build Cake
        run: |
          cd src
          ${{ matrix.cc }} build.c -o build${{ matrix.executable_suffix }}
          ./build${{ matrix.executable_suffix }}
        shell: bash

    - name: Prepare artifact directory
      run: |
        mkdir -p artifact/bin
        mkdir -p artifact/include
        mkdir -p artifact/docs

    - name: Copy binaries
      run: |
        cp src/cake${{ matrix.executable_suffix }} artifact/bin/
        chmod +x artifact/bin/cake${{ matrix.executable_suffix }}
      shell: bash

    - name: Copy additional files
      run: |
        cp -r src/include/* artifact/include/ 2>/dev/null || true
        cp README.md artifact/ 2>/dev/null || true
        cp LICENSE artifact/ 2>/dev/null || true
        cp *.md artifact/docs/ 2>/dev/null || true
      shell: bash

    - name: Copy manifest files
      run: |
        cp package.json artifact/
      shell: bash

    - name: Create version info
      run: |
        echo "Cake Compiler v$(grep CAKE_VERSION src/version.h | cut -d'"' -f2)" > artifact/VERSION
        echo "Built on: $(date)" >> artifact/VERSION
        echo "Platform: ${{ matrix.os }}" >> artifact/VERSION
        echo "Commit: ${{ github.sha }}" >> artifact/VERSION
      shell: bash

    - name: Create archive
      run: |
        cd artifact
        tar -czf ../${{ matrix.artifact_name }}.tar.gz *
        cd ..
        zip -r ${{ matrix.artifact_name }}.zip artifact/*
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(grep CAKE_VERSION src/version.h | cut -d'"' -f2)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Prepare release files
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -exec cp {} release/ \;
        find artifacts -name "*.zip" -exec cp {} release/ \;
        ls -la release/

    - name: Generate release notes
      run: |
        cat > release_notes.md << 'EOF'
        # Cake Compiler Release ${{ steps.version.outputs.version }}
        
        This release contains pre-built binaries for multiple platforms that can be used as PlatformIO packages.
        
        ## Features
        - C23 compiler front-end with advanced flow analysis
        - Object lifetime tracking and safety checks
        - Generates C89-compatible code for maximum compatibility
        - SARIF output for IDE integration
        - Support for experimental C2Y features
        
        ## Platform Support
        - Linux x64
        - macOS x64 (Intel)
        - macOS ARM64 (Apple Silicon)  
        - Windows x64
        
        ## PlatformIO Usage
        
        You can use these artifacts as PlatformIO packages:
        
        ```ini
        [env:myenv]
        platform_packages = 
            https://github.com/thradams/cake/releases/download/v${{ steps.version.outputs.version }}/cake-linux-x64.tar.gz
        ```
        
        Or install directly:
        
        ```bash
        pio pkg install --tool "https://github.com/thradams/cake/releases/download/v${{ steps.version.outputs.version }}/cake-linux-x64.tar.gz"
        ```
        
        ## Manual Installation
        
        Download the appropriate archive for your platform, extract it, and add the `bin` directory to your PATH.
        
        Built from commit: ${{ github.sha }}
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.version.outputs.version) }}
        name: Cake Compiler v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
